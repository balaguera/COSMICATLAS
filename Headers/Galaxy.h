
//#define _USE_LF_COLE_   //meant to speed calculations of Mags within iterative procedures


#ifndef _GALAXY_
#define _GALAXY_


//#define _USE_JK_

# include "NumericalMethods.h"
# include "CosmologicalFunctions.h"
# include "FileOutput.h"
# include "Galaxy.h"


using namespace std;

#define fac M_PI/180.0
#define no_zs -999.0

// ######################################################################
// ######################################################################


// Allocation of the position of different galaxy properties
// in the input catalog
struct gal_parameters{
  int i_ra;
  int i_dec;
  int i_lgal;
  int i_bgal;
  int i_zs;  
  int i_zp;
  int i_mJ;  
  int i_mH;
  int i_mK;
  int i_EBV;
  int i_lsd;
  int i_Kcsb;
  int i_mask_flag;
  double z_min;
  double z_max;
  double mK_min;
  double mK_max;
  double MK_min;
  double MK_max;
  double color_min;
  double color_max;
  int N_Mag_bins;
  int N_mag_bins;
  int N_z_bins;
  int N_color_bins;
  int N_iterations;
  double area_in_deg;
  string ztype;

};

// ######################################################################  
// ######################################################################  
// ######################################################################  
// ######################################################################  

class GALAXY{


    //////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////

private:

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  pointing point;

  //////////////////////////////////////////////////////////
  /**
  *  @brief Structure containing the properties
  */
  gal_parameters gp;

  //////////////////////////////////////////////////////////
  /**
  *  @brief I/O
  */
  FileOutput Fm;

  //////////////////////////////////////////////////////////
  /**
  *  @brief Get the absolute magnitude from
  */
  void get_MK(real_prec, real_prec, real_prec &Mks);

  void get_MK(real_prec, real_prec, real_prec, real_prec, real_prec &Mks);

  //////////////////////////////////////////////////////////
  /**
  *  @brief Auxiliary integer used to count objects
  */
  int count;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  double zzns;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */
  string output_file_dndz;


  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */
  string output_file_dndmk;

  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */
  string output_file_dndz_smooth;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  string output_file_nbar_smooth;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  string output_file_dndz_lf;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  string output_file_LF;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */
  string output_file_NM;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  string output_file_new_cat;

  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////




 public:


  //////////////////////////////////////////////////////////
  /**
  *  @brief Constructor
  */
  GALAXY(){}
  //////////////////////////////////////////////////////////
  /**
  *  @brief Destructor
  */
  ~GALAXY(){}
  //////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */
  string LF_estimator;

  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  bool Get_new_catalog;


  bool Redefine_MKminmax;

  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */
  bool Measure_LF;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  FileOutput Fmm;

  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the comoving distance
  */
  vector<double>rv;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the transverse comoving distance
  */
  vector<double>trv;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the redshift
  */
  vector<double>zv;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  vector<double>zv_n;

  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the growth factor normalized to unity at z=0
  */
  vector<double>gv;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the galaxy bias as a function of z
  */
  vector<double>bias_zv;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the growth index
  */
  vector<double>gfv;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the Distance modulus
  */
  vector<double>Dm;
  //////////////////////////////////////////////////////////
  // Vectors for redshift distributions
  /**
  *  @brief Vector to allocate the redshift for redshift distributions
  */
  vector<double> zn;
  vector<double> zn_low_res;

  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the min redshift in arrays for for redshift distributions
  */
  vector<double> zn_min;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the max redshift in arrays for for redshift distributions
  */
  vector<double> zn_max;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the Hubble function
  */
  vector<double>Hv;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate Mags, and hist positions of gals, used when Vmax_dc is implemented
  */

  vector<int> index_z_Gal;
  vector<int> index_Mk_Gal;
  vector<int> index_Mk_low_Gal;
  vector<int> Gal_inside_intervals;

  vector<int> Gal_inside_intervals_z_m_c; //to check if galaxies are in the z, mK and color intervals only once and then change 3 ifs for only 1

  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the Hubble function
  */
  vector<double>v_z_Kcorr;
  vector<double>v_Kcorr;
  vector<double>v_color_correction_Kcorr;



  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the Maximum volume as a function of the z and M
  */
  vector<double> Vmax_v;


  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the Maximum Area as a function of  K-magnitude
  */
  vector<double> Amax_v;

  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the Maximum Area as a function of  K-magnitude
  */
  string type_of_K_correction;

  double kcorr_index;

  /**
  *  @brief Vector to allocate Magnitudes used in the interpolation to get Vmax
  */
  vector<double> MK_n;

  //////////////////////////////////////////////////////////
  /**
  *  @brief Object to the Cosmological Functions class
  */
  Cosmology Cf;

  ScreenOutput So;

  FileOutput Fo;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Structure to allocate cosmological parameters
  */
  s_CosmologicalParameters scp;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Galaxy catalog
  */
  vector<double > prop;

  vector<int > gal_mask;

  //////////////////////////////////////////////////////////
  /**
  *  @brief Random catalog
  */
  vector<double>  prop_r;

  vector<int > ran_mask;

  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector to allocate the volume of an spherical shell
  */
  vector<double> Vshell;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> nbarq;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<vector<double> >S;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector for the redshift distribution
  */
  vector<double> dNdz;


  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector for the redshift distribution
  */
  vector<double> dNdmk;

  vector<double> v_mk;

  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector for the redshift distribution
  */
  vector<double> dNdz_low_res;

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> edNdz; // Poisson error in the dndz
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */
  vector<double> edNdz_low_res; // Poisson error in the dndz
  //////////////////////////////////////////////////////////
  /**
  *  @brief dndz from the luminosity function
  */
  vector<double> dNdz_lf;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */
  vector<double> dNdz_lf_low_res;

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> nbar;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> zn_new;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> dNdz_new;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> nbar_new;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> prob;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector for the Luminosity function
  */
  vector<double > Pm;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector for the Luminosity function
  */
  vector<double > Pm_low_res;

  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector for the distribution of colors
  */
  vector<double > Pc;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector for the joint distribution of color-Magnitude
  */
  vector<vector<double> >PcMk;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector for the joint distribution of color-Magnitude
  */

  void get_PcMk();
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector for the joint distribution of color-Magnitude
  */
  void get_PcMk_Vmax();
  //////////////////////////////////////////////////////////
  /**
  *  @brief Vector for the joint distribution of color-Magnitude
  */

  void get_Pzc_from_PcMk();

  //////////////////////////////////////////////////////////
    /**
  *  @brief Vector for the joint distribution of redshift-Magnitude
  */
  vector<vector<double> >PzM;


  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */
  void get_PzMK();

  //////////////////////////////////////////////////////////
    /**
  *  @brief Vector for the joint distribution of redshift-Magnitude
  */
  vector<vector<double> >Pzm;


  //////////////////////////////////////////////////////////
    /**
  *  @brief Vector for the joint distribution of redshift-Magnitude
  */
  vector<vector<double> >PKc;

  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  void get_PzK();

  //////////////////////////////////////////////////////////
    /**
  *  @brief Vector for the joint distribution of redshift-Magnitude
  */
  vector<vector<real_prec> >Pzc;


  vector<vector<real_prec> >Pzc_from_PzMk;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  void get_Pzc(bool dot);


  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  void get_PKc();


  //////////////////////////////////cM////////////////////////
  /**
  *  @brief Vector for the number of galaxies in a bin of Magnitude
  */
  vector<double> number_m; //CAMBIAR A int
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  vector<double> number_m_low_res;  //CAMBIAR A int

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> number_z;  //CAMBIAR A int
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  vector<double> number_z_low_res;//CAMBIAR A int

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> number_c; //CAMBIAR A int
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<vector<double> >number_cm;  //CAMBIAR A int
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double>v_Magnitude;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  vector<double>v_Magnitude_low_res;

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double>v_color;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> Delta_it;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */

  vector<double> Delta_it_low_res;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double alpha;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  string name_input_file_cat;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  string name_file_Kcorr;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  string name_file_mask;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  string name_file_mask_north_gal;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  string name_file_mask_south_gal;

  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with the apparent magnitude in the J band
  */
  int i_mJ;



  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with the apparent magnitude in the J band
  */
  int i_Kcsb;


  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with the apparent magnitude in the K band
  */
  int i_mK;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with the apparent magnitude in the H band
  */
  int i_mH;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with the right ascencion
  */
  int i_ra;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with the declination
  */
  int i_dec;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with
  */
  int i_lgal;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with
  */
  int i_bgal;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with
  */
  int i_EBV;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with
  */
  int i_lsd;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with
  */
  int i_zs;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with
  */
  int i_zp;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with
  */
  int i_mask_pixel;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with
  */
  int i_lpix;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with
  */
  int i_bpix;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with
  */
  int i_mask_flag;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Healpix resolution
  */
  int Healpix_resolution;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column with
  */
  int N_iterations;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int i_z_Kcorr;
  int i_flux_factor_Kcorr;
  int i_color_correction_Kcorr;
  //////////////////////////////////////////////////////////
  /**
  *  @brief type of redshift, s or p
  */
  string redshift_type;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int N_bin_z;
  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */
  int N_bin_z_low_res;

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double z_min;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double z_max;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double z_min_low_res;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double z_max_low_res;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int N_bin_mag;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double mK_min;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double mK_max;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int N_bin_color;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double color_min;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double color_max;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int N_bin_Mag;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int N_bin_Mag_low_res;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double MK_min;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double MK_max;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int i_magnitude_limit;

  int i_z_limit;

  unsigned long NGAL;
  unsigned int NCOLS;

  unsigned long NRAN;
  unsigned int NCOLS_R;


  unsigned long NMASK;
  unsigned int NCOLS_MASK;
  
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> mK_limits;
  vector<double> z_limits;

  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  //   Definition of cosmological parameters
  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  double Om_matter;
  double Om_cdm;
  double Om_radiation ;
  double Om_baryons;
  double Om_vac;
  double Om_k;
  double Hubble;
  double hubble;
  double n_s;
  double alpha_s;
  double w_eos;
  double N_eff;
  double sigma8;
  double Tcmb;
  double GAL_BIAS;
  double alpha_BIAS;
  double kstar;
  bool use_K_correction;
  bool use_e_correction;


  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double total_area;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double z_min_vls;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double deltaz;
  double deltaz_low_res;

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double area_pixel;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  long n_pixels;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int nside;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int N_z_cosmo;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int nM;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int imk;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  string hemisphere;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column added to propwith 1 naad 0 depending whether or not the alaxy is observed
  */
  int i_gal_mask;
  //////////////////////////////////////////////////////////
  /**
  *  @brief Column added to propwith 1 naad 0 depending whether or not the alaxy is observed
  */
  int i_ran_mask;

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int iz_vls;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  int i_z;

  //////////////////////////////////////////////////////////

  /**
  *  @brief
  */
  bool use_galaxies_with_zp_AND_zs;

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  double area_in_deg;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double>  mask;

  vector<vector<double> > mask_old;


  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  vector<double> lf;
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void set_catalog(string);
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void set_vec();
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void set_pars(int);
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_random_cat(string, long); // to create random


  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void set_file_names(); // to create random


  string name_cat;


  int observed_pixels_in_mask;
  
  //////////////////////////////////////////////////////////
  /**
  *  @brief Get the index from the mask loaded in the class, Very SLOW
  */
  void get_ipix_from_mask(int, Healpix_Map<double>, long &ipx ); // to create random



  //////////////////////////////////////////////////////////
  /**
  *  @brief  Obtain minimum value of the i-th column of gal properties
  *          The column ic is passed explicitely
  */
  double get_min(int ic);
  //////////////////////////////////////////////////////////
   /**
   *  @brief Obtain minimum value of the i-th column of random properties
   *          The column ic is passed explicitely
   */
  double get_min_r(int ic);
  //////////////////////////////////////////////////////////
   /**
   *  @brief  Obtain maximum value of the i-th column of gal properties
   *          The column is passed explicitely
   */
  double get_max(int);
  //////////////////////////////////////////////////////////
   /**
   *  @brief
   */
  double get_max_r(int);
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_zbins_same_ngal(int, int, double, double,vector< vector<double> >&);
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_mask();

  void get_mask_fits(string);
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_dndz();
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_dndmk();

  //////////////////////////////////////////////////////////
    /**
  *  @brief
  */
  int Ngal_dndz;
  //////////////////////////////////////////////////////////
  /**
  *  @brief get the distribution of the property x
  */
  void get_dndx(string x);
  //////////////////////////////////////////////////////////
  /**
  *  @brief get the joint distribution in the properties x,y
  */
  void get_dndx(string x, string y);

  //////////////////////////////////////////////////////////
  /**
  *  @brief get the Number of objects with property y greater than a value y, in bins of property x
  */
  void get_dndx_cumulative(string x, string y_cum);

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_dndz_bcg(string);
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_nbar();
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_nbar_bcg();

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_z_pdf();
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_M_pdf();

  //////////////////////////////////////////////////////////
  /**
  *  @brief  Get cosmological functions
  */
  void get_cosmo(int,bool);

  void read_input_cats(string);

  //////////////////////////////////////////////////////////
  /**
  *  @brief Get Number counts using the Amax estimator
  */
  void get_NS();

  //////////////////////////////////////////////////////////
  /**
  *  @brief Get luminosity function
  */
  void get_Vmax();
  //////////////////////////////////////////////////////////
  /**
  *  @brief Get luminosity function
  */
  void get_LF_Vmax(ULONG);
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_LF_Cole();

  void get_LF_Cole2();

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_dndz_LF();
  void get_dndz_LF_bins();


  //////////////////////////////////////////////////////////
  /**
  *  @brief Generate a Healpix Mask masking north and south according
  * to the coordinate system passed as argument.
  */
  void get_new_mask(string coord);
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_new_cat();

  void read_get_Kcorr();

  void get_alpha_rsd();

  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_new_cat_bcg(string,string);
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void bspline(int, int);
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void set_nbar(vector<double>,vector<double>,vector<double>);
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void get_jacknife_mask(); // specfic for 2mpz
  //////////////////////////////////////////////////////////
  /**
  *  @brief
  */
  void read_pars(string &file);

  bool Measure_M_pdf;

  int index_mask;

  ULONG Ngal_expected;
  
};

#endif
