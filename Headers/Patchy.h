// **************************************************************
/**
 * @class<Patchy>
 * @brief Header file for the class Patchy::
 * @file Patchy.h
 * @title Patchy: Approximated gravity solvers
 * @author Francisco-Shu Kitaura, Andres Balaguera-Antol√≠nez
 * @version   1.0
 * @date      2020
*/
// **************************************************************
// **************************************************************
// **************************************************************



#ifndef _PATCHY_
#define _PATCHY_


//#include "def.h"
#include "bstream.h"
#include <math.h>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <string.h>
#include <cassert>
#include <cfloat>
#include <stdlib.h>
#include <stdio.h>
#include <fftw3.h>
#include <omp.h>
#include <sstream>
#include <netinet/in.h>
#include <gsl/gsl_errno.h>
#include <gsl/gsl_spline.h>
#include <gsl/gsl_randist.h>
#include <gsl/gsl_integration.h>
#include <gsl/gsl_sf.h>

#include "FileOutput.h"
#include "NumericalMethods.h"
#include "../Headers/massFunctions.h"

using namespace std;


//##################################################################################

// *****************************************************************************************************
/*!\class PATCHY

 * @details   PATCHY
 * @author    Francisco-Shu Kitaura
 * @author    adapted by Andres Balaguera-Antolinez

 * @brief CLASS PATCHY
 */


//##################################################################################

class PATCHY{

  private:

  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  /* /\** */
  /*  * @brief outoput object */
  /*  *\/ */
  /* ofstream sal; */

  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  /**
   * @brief Object of class FileOutput
   */
  FileOutput File;

  //////////////////////////////////////////////////////////
  /**
   * @brief Input parameter file adapted to Patchy. Ideally, to bemerged with that of BAM
   */
  string par_file;

  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string ic_WC_dir;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string ic_file;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  bool use_ic_file;

  /**
   *  @brief ScreenOutput obejct
   */
  ScreenOutput So;



  //////////////////////////////////////////////////////////
  /**
   * @brief Structure containing parameters used in patchy
   * this is to be deprecated once homogeneization is complete
   */

  //  struct DATA *data;


  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */

  int inputmode;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  int seed_ref;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  bool runsim;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  bool runv;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  bool diffcosmorz;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string Output_directory;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string ic_power_file;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string ic_input_type;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string ic_WN_file;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string ic_WN_dir;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string dataFileName;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string fastpmpath;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  bool lognden;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string dir;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  bool transf;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec slength;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec slengthv;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec vslength;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec velbias;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  int Nchunk;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  int masskernel;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  int masskernel_vel;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec dkbin;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  int N_bin;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec biasE;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec biasepsilon;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec biasrhoexp;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec biasone;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec biassign;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec biassign2;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec biasepsilon2;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec biasrhoexp2;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec devpois;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec deltathH;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string buffsf;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec Nmean;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec deltath;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec cs2;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec cs3;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec cst;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec cpsi;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec cdeltas2;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec biasL;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec sfac;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec ep;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec xllc;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec yllc;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec zllc;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec xobs;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec yobs;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec zobs;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec d1;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec d2;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec d3;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec L1;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec L2;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec L3;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  ULONG N1;
  ULONG N2;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  ULONG N3;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  bool readPS;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  ULONG NGRID;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  bool planepar;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  Params params;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec Initial_Redshift_DELTA;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  real_prec Initial_Redshift_ic_power_file;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  bool Normalize_initial_redshift;
  real_prec growth_ini=1;
  //////////////////////////////////////////////////////////
  /**
   * @brief
   */
  vector<real_prec>tab;
  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////

 public:

  /**
   *  @brief default constructor
   *  @brief object of class PATCHY. I use this to defined a PACHY objects as a BAM class member
   *  @brief
   */
  PATCHY(){}
  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  /**
   *  @brief constructor
   *  @param parameters_file parameter file
   *  @return object of class PATCHY
   */






 PATCHY(Params _params, s_CosmoInfo _s_cosmo_info) :s_cosmo_info(_s_cosmo_info)
  {
   this->set_params_patchy(_params);
   this->NGRID=static_cast<ULONG>(this->N1*this->N2*this->N3);
   time_t time_bam;
   time(&time_bam);
   this->So.initial_time=time_bam;
   this->gp_power<<"set border linewidth 1.5\n";
   this->gp_pdf<<"set border linewidth 1.5\n";

 }

 //////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////
  /**
     *  @brief Default destructor
     *  @return
   */
  ~PATCHY(){}

 //////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////
 /**
  * @brief Reading and initializing structures with params for patchy
  */

  void set_params_patchy(Params pars);
 //////////////////////////////////////////////////////////
 /**
  * @brief Set names of files. Strings are private class members
  */
  void set_fnames();
  //////////////////////////////////////////////////////////

  /**
   *  @brief Generate DM density field according to some SF model and IC
   */

#ifdef OMPPARRAN
 void get_dm_field(gsl_rng ** gBaseRand);
#else
  void get_dm_field(gsl_rng * gBaseRand);
#endif


  //////////////////////////////////////////////////////////

  /**
   *  @brief Generate DM density field according to some SF model and IC
   */

#ifdef OMPPARRAN
 void get_displacement(gsl_rng ** gBaseRand, vector<real_prec>&, int it);
#else
 void get_displacement(gsl_rng * gBaseRand, vector<real_prec>&, int it);
#endif


  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  Gnuplot gp_power;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  Gnuplot gp_pdf;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  vector<real_prec>Displacement;


  //////////////////////////////////////////////////////////
  /**
   *  @brief
   */
  void  displace_part_comp(vector<real_prec> &posi, vector<real_prec>&psii, bool periodic,int comp);

  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  /**
   *  @brief
   */
#ifndef _DISPLACEMENTS_
  void Lag2Eul_comp(real_prec biasLAG2,real_prec kth,int ftype,bool periodic,vector<real_prec> &out,int comp);
#else
  void Lag2Eul_comp(real_prec biasLAG2,real_prec kth,int ftype,bool periodic,int comp);
#endif
  //////////////////////////////////////////////////////////
  /**
   *  @brief
   */
  void Lag2Eul_vel(real_prec biasLAG2,real_prec kth,int ftype,bool periodic);

  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  /**
   *  @brief
   */
  void Lag2Eul_compB(real_prec kth,int ftype,bool periodic,vector<real_prec> &out,int comp);

  //////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////
  /**
   *  @brief Patchy routine to generate catalog with positions and velocities
   */

#ifdef OMPPARRANRSD
  void makecat(string stradd,string fnameMOCK, ULONG NLL,ULONG NOBJ,gsl_rng ** gBaseRand, int ir);
#else
  void makecat(string stradd,string fnameMOCK, ULONG NLL,ULONG NOBJ,gsl_rng * gBaseRand, int ir);
#endif


  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
#ifdef _USE_OMP_
  void makecat_withv(string stradd,string fnameMOCK, ULONG NLL,ULONG NOBJ,gsl_rng ** gBaseRand, int ir);
  void makecat_withv_new(string stradd,string fnameMOCK, ULONG NLL,ULONG NOBJ,gsl_rng ** gBaseRand,int ir);
#else
  void makecat_withv(string stradd,string fnameMOCK, ULONG NLL,ULONG NOBJ,gsl_rng * gBaseRand, int ir);
  void makecat_withv_new(string stradd,string fnameMOCK, ULONG NLL,ULONG NOBJ,gsl_rng * gBaseRand,int ir);
#endif



  //////////////////////////////////////////////////////////
  void read_tabulated_power();


  real_prec linInterp(real_prec xpos, real_prec ypos, real_prec zpos, const vector<real_prec>&);

  //////////////////////////////////////////////////////////
  /**
   * @brief Object of class Cosmology
   */
  void theta2velcomp(vector<real_prec> & delta, vector<real_prec> &vei, bool zeropad, bool norm, int comp);

  void comp_velbias(vector<real_prec> &delta, vector<real_prec>&out, bool zeropad, bool norm);

  void normalize_df_z_ini(vector<real_prec>&, vector<real_prec>&, string type);

  void DM_to_RSS(int los);
  //////////////////////////////////////////////////////////
  /**
   * @brief Object of class Cosmology
   */
  Cosmology Cosmo;
  //////////////////////////////////////////////////////////
  /**
   * @brief Structure allocating cosmological parameters
   */
  s_CosmologicalParameters s_cosmo_pars;

  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////
  /**
   * @brief Structure allocating cosmological information
   */
  s_CosmoInfo s_cosmo_info;

  /**
   * @brief Name of file containing the DM produced by PATCHY
   */
  string fnamePOSX;
    //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
 string fnamePOSX_RS;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string fnameVXpart;
  /**
   * @brief Name of file containing the DM produced by PATCHY
   */
  string fnamePOSY;
   //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
 string fnamePOSY_RS;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string fnameVYpart;

  /**
   * @brief Name of file containing the DM produced by PATCHY
   */
  string fnamePOSZ;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string fnamePOSZ_RS;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  string fnameVZpart;

  /**
   * @brief Name of file containing the VX interpolated on the mesh produced by PATCHY
   */
  string fnameVX;
  /**
   * @brief Name of file containing the DM produced by PATCHY
   */
  string fnameVY;
  /**
   * @brief Name of file containing the DM produced by PATCHY
   */
  string fnameVZ;

  //////////////////////////////////////////////////////////
  /**
   * @brief Name of file containing the Fourier grid with the 3D power spectrum therein interpolated. No ".dat"
   */
   string fname3DPOWER;

   //////////////////////////////////////////////////////////
  /**
   * @brief Name of file the White noise in conf space
   */
   string fnameIC;

   //////////////////////////////////////////////////////////
   /**
    * @brief Name of file the initial density field displaying an initial power spectrum
    */
   string fnameICDELTA;

      //////////////////////////////////////////////////////////
   string fnameDM;
   string fnameDM_RS;


   //////////////////////////////////////////////////////////
   string fname2LPTTERM;


   //////////////////////////////////////////////////////////
   string fnameTHETA;


   //////////////////////////////////////////////////////////
   string fnameDMNGP;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fnameDMNGP_RS;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fnameS2TERM;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fnameS2TERMEUL;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fnameP2TERMEUL;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fnameS3TERM;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fnameS3TERMEUL;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fnameSTTERM;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fnameSTTERMEUL;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fnamePSITERMEUL;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fname2LPTTERMEUL;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string stradd;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string stradd_bam;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fnameTRACERCAT;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fname_MOCK_NCOUNTS;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fname_MOCK_MASS;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   string fname_MOCK_NCOUNTS_SAT;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   ULONG Number_of_Tracers;
  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
   int sfmodel;


  //////////////////////////////////////////////////////////
  /**
   * @brief  
   */
  int seed;

};


#endif

//##################################################################################
//##################################################################################
//##################################################################################
//##################################################################################
