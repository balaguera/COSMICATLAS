#ifndef _MCMC_FUNCTIONS_
#define _MCMC_FUNCTIONS_


# include <gsl/gsl_blas.h>
# include <gsl/gsl_errno.h>
# include <gsl/gsl_rng.h>
# include <gsl/gsl_eigen.h>
# include <gsl/gsl_randist.h>
# include <gsl/gsl_sort.h>
# include <gsl/gsl_sort_vector.h>
# include <ctime>
# include <cmath>
# include <cctype>
# include <string>
# include <iostream>
# include <math.h>
# include <stdio.h>
# include <fstream>
# include <sstream>
# include <cassert>
# include <vector>
# include <limits>
# include <algorithm>
# include "CosmologicalFunctions.h"
# include "FileOutput.h"
# include "ScreenOutput.h"
using namespace std;


class MCMC_FUNCTIONS{

private:

  Cosmology Cf;
  //////////////////////////////////////////////////////////
  vector<real_prec>priors_measured;
  //////////////////////////////////////////////////////////
  vector<real_prec>priors_model;
  //////////////////////////////////////////////////////////
  vector<vector<real_prec> >inv_cov;
  //////////////////////////////////////////////////////////
  ofstream osali;

  //////////////////////////////////////////////////////////

  ScreenOutput So;



 public:

  MCMC_FUNCTIONS(){}

  ~MCMC_FUNCTIONS(){}
  //////////////////////////////////////////////////////////


  //////////////////////////////////////////////////////////
  const gsl_rng_type * T;
  gsl_rng * r;
  int seed;
  ofstream lpout;
  //////////////////////////////////////////////////////////
  int n_steps;
  //////////////////////////////////////////////////////////
  int n_parameters;
  //////////////////////////////////////////////////////////
  int n_priors;
  //////////////////////////////////////////////////////////
  int nchains;
  //////////////////////////////////////////////////////////
  int chain_ini;
  //////////////////////////////////////////////////////////
  int chain_fin;
  //////////////////////////////////////////////////////////
  int chain;
  //////////////////////////////////////////////////////////
  bool use_distance_priors;
  //////////////////////////////////////////////////////////
  string sampling;
  //////////////////////////////////////////////////////////
  bool  diagonal_covariance_matrix;
  //////////////////////////////////////////////////////////
  bool  analytic_marginalization_wrt_amplitude;
  //////////////////////////////////////////////////////////
  int Id;
  //////////////////////////////////////////////////////////
  int Jd;
  //////////////////////////////////////////////////////////
  int nbin_1D;
  //////////////////////////////////////////////////////////
  int nbin_2D;
  //////////////////////////////////////////////////////////
  string MAS;
  //////////////////////////////////////////////////////////
  int msteps;
  //////////////////////////////////////////////////////////
  string experiment;
  //////////////////////////////////////////////////////////
  string model;
  //////////////////////////////////////////////////////////
  string observable;
  //////////////////////////////////////////////////////////
  string fit_type;
  //////////////////////////////////////////////////////////
  string input_par_file_model;
  //////////////////////////////////////////////////////////
  string file_oo;
  //////////////////////////////////////////////////////////
  string output_file;
  //////////////////////////////////////////////////////////
  vector < vector<real_prec> > acc_parameters;
  //////////////////////////////////////////////////////////
  vector<real_prec> weight;
  //////////////////////////////////////////////////////////
  vector<real_prec> chiss;
  //////////////////////////////////////////////////////////
  vector<real_prec> error_fixed_parameters;
  //////////////////////////////////////////////////////////
  vector<real_prec> parameters_max;
  //////////////////////////////////////////////////////////
  vector<real_prec> parameters_max_2dplot;

  //////////////////////////////////////////////////////////
  vector<real_prec> parameters_min;
  //////////////////////////////////////////////////////////
  vector<real_prec> parameters_min_2dplot;
  //////////////////////////////////////////////////////////
  string output_dir;
  //////////////////////////////////////////////////////////
  vector<real_prec> parameters_fid;
  //////////////////////////////////////////////////////////
  vector<real_prec> delta_parameters;
  //////////////////////////////////////////////////////////
  vector<real_prec> parameters;
  //////////////////////////////////////////////////////////
  vector<real_prec> parameters_ini;
  //////////////////////////////////////////////////////////
  vector<int>    fixed_parameters;
  //////////////////////////////////////////////////////////
  vector<real_prec>    mean_parameters;
  //////////////////////////////////////////////////////////
  vector<real_prec>    stdev_parameters;
  //////////////////////////////////////////////////////////
  vector<real_prec>    d_min;
  //////////////////////////////////////////////////////////
  vector<real_prec>    d_max;
  //////////////////////////////////////////////////////////
  vector<real_prec>    R;
  //////////////////////////////////////////////////////////
  //Container with all steps of merged chains
  vector<vector <vector <real_prec> > > acc_parameters_all;
  //////////////////////////////////////////////////////////
  vector<int> mark;
  //////////////////////////////////////////////////////////
  vector<int> acca;
  //////////////////////////////////////////////////////////
  vector<vector<real_prec> > weight_r;
  //////////////////////////////////////////////////////////
  vector<vector<real_prec> > chi_models;
  //////////////////////////////////////////////////////////
  //Containers for HMC
  vector<real_prec> grad_U;
  //////////////////////////////////////////////////////////
  vector< vector<real_prec> >dCmod_dp;
  //////////////////////////////////////////////////////////
  vector <real_prec> momentum;
  //////////////////////////////////////////////////////////
  vector <real_prec> masses;
    //////////////////////////////////////////////////////////
  vector <real_prec> epsilon;
    //////////////////////////////////////////////////////////
  vector <real_prec> mean_pars;
    //////////////////////////////////////////////////////////
  vector <vector<real_prec> > cov_masses;
  //////////////////////////////////////////////////////////
  vector <vector<real_prec> > icov_masses;
  //////////////////////////////////////////////////////////
  void read_parameters(string parameters_file,string);
  //////////////////////////////////////////////////////////
  void set_mcmc_vectors();
  //////////////////////////////////////////////////////////
  void set_mcmc_read_vectors();
  //////////////////////////////////////////////////////////
  void mass_asg2d(string, real_prec,real_prec,real_prec,real_prec,real_prec,vector< vector<real_prec> >&);
  //////////////////////////////////////////////////////////
  void get_mean(vector<real_prec>  &, int, vector< vector<real_prec> > &);
  //////////////////////////////////////////////////////////
  void gelman_rubbin_diag(int,vector<int> &,vector<int> &, vector<vector<vector<real_prec> > > &);
  //////////////////////////////////////////////////////////
  void likelihood_full(int lmin, int lmax, vector<matrices>&VM,real_prec &chis_one);
  //////////////////////////////////////////////////////////
  void get_det_matrix(vector<vector<real_prec> >&mat, real_prec &determinant);
  //////////////////////////////////////////////////////////
  void chi_squared(vector<real_prec>&,vector<real_prec>&, vector< vector <real_prec> > &, real_prec &);
  //////////////////////////////////////////////////////////
  void chi_squared(const vector<real_prec>&,const vector<real_prec>&, vector<real_prec> &, real_prec &);
  void chi_squared_poisson(vector<real_prec>&,vector<real_prec>&, real_prec &); //change names to loglikelihood
  void get_loglikelihood_Poisson(vector<vector<real_prec> >&,vector<vector<real_prec>>&, real_prec &);

  //////////////////////////////////////////////////////////
  void chi_squared(vector<real_prec>&, vector<real_prec> &,vector<real_prec> &, vector<real_prec>&, real_prec, real_prec, real_prec &);
  //////////////////////////////////////////////////////////
  void chi_squared_marginalized_amplitude(vector<real_prec> &, vector<real_prec> &, vector< vector<real_prec> > &, real_prec &);
  //////////////////////////////////////////////////////////
  void chi_squared_marginalized_amplitude(vector<real_prec> &, vector<real_prec> &, vector<real_prec> &, vector<real_prec>&, real_prec, real_prec, real_prec &);
  //////////////////////////////////////////////////////////
  void get_cova_pars(int acc);
  //////////////////////////////////////////////////////////
  void jump();
  //////////////////////////////////////////////////////////
  void MHalgorithm(real_prec&, real_prec&, int&, int&);
  //////////////////////////////////////////////////////////
  void write_accepted_models(int step, int acc, int weight_here, string);
  //////////////////////////////////////////////////////////
  real_prec kinetic(int);
  //////////////////////////////////////////////////////////
  void get_gradU(vector<real_prec>&model, vector<real_prec>&meas, vector<vector<real_prec> >&Step,vector<vector<real_prec> >&R,vector<vector<real_prec> >&V,vector<vector<real_prec> >&icov);
  //////////////////////////////////////////////////////////
  void get_gradU_full(int lmin, int lmax, vector<matrices> VM,vector<real_prec>&Cmodel,vector<real_prec>&gradU_full);
  //////////////////////////////////////////////////////////
  void get_model_FB(vector<vector<real_prec> >&Step,vector<vector<real_prec> >&R,vector<vector<real_prec> >&V,vector<real_prec>&Cm);
  //////////////////////////////////////////////////////////
  void get_cova_FB_delta(vector<matrices>&,int, vector<vector<real_prec> >&Cmodel);
  //////////////////////////////////////////////////////////
  void auto_correlation_mcmc(vector<int>&,vector< vector<real_prec> > &,vector< vector<real_prec> > &);
  //////////////////////////////////////////////////////////
  void entropy_mcmc(vector< vector<real_prec> > &,vector<real_prec>&);
  //////////////////////////////////////////////////////////
  void posterior1d(string, string, vector<real_prec>  &, vector<vector<real_prec> > &,int);
  //////////////////////////////////////////////////////////
  void posterior2d(string,string, vector<real_prec> &, vector<vector<real_prec> > &);
  //////////////////////////////////////////////////////////
  void get_contour_levels(string,vector<vector<real_prec> > &);

  //////////////////////////////////////////////////////////
  /**
   * @brief
   * @returns
   */
  void posterior2d_combined_experiments(string, string, string,string, experiments ex);
  //////////////////////////////////////////////////////////
  /**
   * @brief
   * @returns
   */

  void posterior1d_combined_experiments(string,string, experiments ex);
  //////////////////////////////////////////////////////////
  /**
   * @brief This function builds the kernel from the ratio
   * @returns Container Bam::Kernel
   */

  void set_distance_priors(int I, int J);
  //////////////////////////////////////////////////////////
  void distance_priors_cmb_model(int I, int J, s_CosmologicalParameters *scp);
  //////////////////////////////////////////////////////////
  real_prec chi_squared_distance_priors();
  //////////////////////////////////////////////////////////
};






#endif
